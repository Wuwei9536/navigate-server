// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  card: (where?: CardWhereInput) => Promise<boolean>;
  menu: (where?: MenuWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  menu: (where: MenuWhereUniqueInput) => MenuNullablePromise;
  menus: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Menu>;
  menusConnection: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createMenu: (data: MenuCreateInput) => MenuPromise;
  updateMenu: (args: {
    data: MenuUpdateInput;
    where: MenuWhereUniqueInput;
  }) => MenuPromise;
  updateManyMenus: (args: {
    data: MenuUpdateManyMutationInput;
    where?: MenuWhereInput;
  }) => BatchPayloadPromise;
  upsertMenu: (args: {
    where: MenuWhereUniqueInput;
    create: MenuCreateInput;
    update: MenuUpdateInput;
  }) => MenuPromise;
  deleteMenu: (where: MenuWhereUniqueInput) => MenuPromise;
  deleteManyMenus: (where?: MenuWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  menu: (
    where?: MenuSubscriptionWhereInput
  ) => MenuSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "card_icon_ASC"
  | "card_icon_DESC"
  | "card_title_ASC"
  | "card_title_DESC"
  | "card_description_ASC"
  | "card_description_DESC"
  | "card_href_ASC"
  | "card_href_DESC";

export type MenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "menu_icon_ASC"
  | "menu_icon_DESC"
  | "menu_name_ASC"
  | "menu_name_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MenuUpdateOneRequiredWithoutCardInput {
  create?: Maybe<MenuCreateWithoutCardInput>;
  update?: Maybe<MenuUpdateWithoutCardDataInput>;
  upsert?: Maybe<MenuUpsertWithoutCardInput>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CardUpdateManyMutationInput {
  card_icon?: Maybe<String>;
  card_title?: Maybe<String>;
  card_description?: Maybe<String>;
  card_href?: Maybe<String>;
}

export interface MenuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  menu_icon?: Maybe<String>;
  menu_icon_not?: Maybe<String>;
  menu_icon_in?: Maybe<String[] | String>;
  menu_icon_not_in?: Maybe<String[] | String>;
  menu_icon_lt?: Maybe<String>;
  menu_icon_lte?: Maybe<String>;
  menu_icon_gt?: Maybe<String>;
  menu_icon_gte?: Maybe<String>;
  menu_icon_contains?: Maybe<String>;
  menu_icon_not_contains?: Maybe<String>;
  menu_icon_starts_with?: Maybe<String>;
  menu_icon_not_starts_with?: Maybe<String>;
  menu_icon_ends_with?: Maybe<String>;
  menu_icon_not_ends_with?: Maybe<String>;
  menu_name?: Maybe<String>;
  menu_name_not?: Maybe<String>;
  menu_name_in?: Maybe<String[] | String>;
  menu_name_not_in?: Maybe<String[] | String>;
  menu_name_lt?: Maybe<String>;
  menu_name_lte?: Maybe<String>;
  menu_name_gt?: Maybe<String>;
  menu_name_gte?: Maybe<String>;
  menu_name_contains?: Maybe<String>;
  menu_name_not_contains?: Maybe<String>;
  menu_name_starts_with?: Maybe<String>;
  menu_name_not_starts_with?: Maybe<String>;
  menu_name_ends_with?: Maybe<String>;
  menu_name_not_ends_with?: Maybe<String>;
  card_every?: Maybe<CardWhereInput>;
  card_some?: Maybe<CardWhereInput>;
  card_none?: Maybe<CardWhereInput>;
  AND?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  OR?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  NOT?: Maybe<MenuWhereInput[] | MenuWhereInput>;
}

export interface CardUpdateWithoutMenuDataInput {
  card_icon?: Maybe<String>;
  card_title?: Maybe<String>;
  card_description?: Maybe<String>;
  card_href?: Maybe<String>;
}

export interface CardCreateManyWithoutMenuInput {
  create?: Maybe<CardCreateWithoutMenuInput[] | CardCreateWithoutMenuInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
}

export interface CardUpdateWithWhereUniqueWithoutMenuInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutMenuDataInput;
}

export interface MenuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuWhereInput>;
  AND?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  OR?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  NOT?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
}

export type MenuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MenuCreateInput {
  id?: Maybe<ID_Input>;
  menu_icon: String;
  menu_name: String;
  card?: Maybe<CardCreateManyWithoutMenuInput>;
}

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  card_icon: String;
  card_title: String;
  card_description: String;
  card_href: String;
  menu: MenuCreateOneWithoutCardInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MenuCreateOneWithoutCardInput {
  create?: Maybe<MenuCreateWithoutCardInput>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface MenuCreateWithoutCardInput {
  id?: Maybe<ID_Input>;
  menu_icon: String;
  menu_name: String;
}

export interface CardUpdateManyDataInput {
  card_icon?: Maybe<String>;
  card_title?: Maybe<String>;
  card_description?: Maybe<String>;
  card_href?: Maybe<String>;
}

export interface CardUpdateInput {
  card_icon?: Maybe<String>;
  card_title?: Maybe<String>;
  card_description?: Maybe<String>;
  card_href?: Maybe<String>;
  menu?: Maybe<MenuUpdateOneRequiredWithoutCardInput>;
}

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export interface CardUpdateManyWithoutMenuInput {
  create?: Maybe<CardCreateWithoutMenuInput[] | CardCreateWithoutMenuInput>;
  delete?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  set?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  disconnect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  update?: Maybe<
    | CardUpdateWithWhereUniqueWithoutMenuInput[]
    | CardUpdateWithWhereUniqueWithoutMenuInput
  >;
  upsert?: Maybe<
    | CardUpsertWithWhereUniqueWithoutMenuInput[]
    | CardUpsertWithWhereUniqueWithoutMenuInput
  >;
  deleteMany?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  updateMany?: Maybe<
    CardUpdateManyWithWhereNestedInput[] | CardUpdateManyWithWhereNestedInput
  >;
}

export interface CardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  card_icon?: Maybe<String>;
  card_icon_not?: Maybe<String>;
  card_icon_in?: Maybe<String[] | String>;
  card_icon_not_in?: Maybe<String[] | String>;
  card_icon_lt?: Maybe<String>;
  card_icon_lte?: Maybe<String>;
  card_icon_gt?: Maybe<String>;
  card_icon_gte?: Maybe<String>;
  card_icon_contains?: Maybe<String>;
  card_icon_not_contains?: Maybe<String>;
  card_icon_starts_with?: Maybe<String>;
  card_icon_not_starts_with?: Maybe<String>;
  card_icon_ends_with?: Maybe<String>;
  card_icon_not_ends_with?: Maybe<String>;
  card_title?: Maybe<String>;
  card_title_not?: Maybe<String>;
  card_title_in?: Maybe<String[] | String>;
  card_title_not_in?: Maybe<String[] | String>;
  card_title_lt?: Maybe<String>;
  card_title_lte?: Maybe<String>;
  card_title_gt?: Maybe<String>;
  card_title_gte?: Maybe<String>;
  card_title_contains?: Maybe<String>;
  card_title_not_contains?: Maybe<String>;
  card_title_starts_with?: Maybe<String>;
  card_title_not_starts_with?: Maybe<String>;
  card_title_ends_with?: Maybe<String>;
  card_title_not_ends_with?: Maybe<String>;
  card_description?: Maybe<String>;
  card_description_not?: Maybe<String>;
  card_description_in?: Maybe<String[] | String>;
  card_description_not_in?: Maybe<String[] | String>;
  card_description_lt?: Maybe<String>;
  card_description_lte?: Maybe<String>;
  card_description_gt?: Maybe<String>;
  card_description_gte?: Maybe<String>;
  card_description_contains?: Maybe<String>;
  card_description_not_contains?: Maybe<String>;
  card_description_starts_with?: Maybe<String>;
  card_description_not_starts_with?: Maybe<String>;
  card_description_ends_with?: Maybe<String>;
  card_description_not_ends_with?: Maybe<String>;
  card_href?: Maybe<String>;
  card_href_not?: Maybe<String>;
  card_href_in?: Maybe<String[] | String>;
  card_href_not_in?: Maybe<String[] | String>;
  card_href_lt?: Maybe<String>;
  card_href_lte?: Maybe<String>;
  card_href_gt?: Maybe<String>;
  card_href_gte?: Maybe<String>;
  card_href_contains?: Maybe<String>;
  card_href_not_contains?: Maybe<String>;
  card_href_starts_with?: Maybe<String>;
  card_href_not_starts_with?: Maybe<String>;
  card_href_ends_with?: Maybe<String>;
  card_href_not_ends_with?: Maybe<String>;
  AND?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  OR?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  NOT?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
}

export interface MenuUpdateWithoutCardDataInput {
  menu_icon?: Maybe<String>;
  menu_name?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface CardCreateWithoutMenuInput {
  id?: Maybe<ID_Input>;
  card_icon: String;
  card_title: String;
  card_description: String;
  card_href: String;
}

export interface MenuUpdateInput {
  menu_icon?: Maybe<String>;
  menu_name?: Maybe<String>;
  card?: Maybe<CardUpdateManyWithoutMenuInput>;
}

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  card_icon?: Maybe<String>;
  card_icon_not?: Maybe<String>;
  card_icon_in?: Maybe<String[] | String>;
  card_icon_not_in?: Maybe<String[] | String>;
  card_icon_lt?: Maybe<String>;
  card_icon_lte?: Maybe<String>;
  card_icon_gt?: Maybe<String>;
  card_icon_gte?: Maybe<String>;
  card_icon_contains?: Maybe<String>;
  card_icon_not_contains?: Maybe<String>;
  card_icon_starts_with?: Maybe<String>;
  card_icon_not_starts_with?: Maybe<String>;
  card_icon_ends_with?: Maybe<String>;
  card_icon_not_ends_with?: Maybe<String>;
  card_title?: Maybe<String>;
  card_title_not?: Maybe<String>;
  card_title_in?: Maybe<String[] | String>;
  card_title_not_in?: Maybe<String[] | String>;
  card_title_lt?: Maybe<String>;
  card_title_lte?: Maybe<String>;
  card_title_gt?: Maybe<String>;
  card_title_gte?: Maybe<String>;
  card_title_contains?: Maybe<String>;
  card_title_not_contains?: Maybe<String>;
  card_title_starts_with?: Maybe<String>;
  card_title_not_starts_with?: Maybe<String>;
  card_title_ends_with?: Maybe<String>;
  card_title_not_ends_with?: Maybe<String>;
  card_description?: Maybe<String>;
  card_description_not?: Maybe<String>;
  card_description_in?: Maybe<String[] | String>;
  card_description_not_in?: Maybe<String[] | String>;
  card_description_lt?: Maybe<String>;
  card_description_lte?: Maybe<String>;
  card_description_gt?: Maybe<String>;
  card_description_gte?: Maybe<String>;
  card_description_contains?: Maybe<String>;
  card_description_not_contains?: Maybe<String>;
  card_description_starts_with?: Maybe<String>;
  card_description_not_starts_with?: Maybe<String>;
  card_description_ends_with?: Maybe<String>;
  card_description_not_ends_with?: Maybe<String>;
  card_href?: Maybe<String>;
  card_href_not?: Maybe<String>;
  card_href_in?: Maybe<String[] | String>;
  card_href_not_in?: Maybe<String[] | String>;
  card_href_lt?: Maybe<String>;
  card_href_lte?: Maybe<String>;
  card_href_gt?: Maybe<String>;
  card_href_gte?: Maybe<String>;
  card_href_contains?: Maybe<String>;
  card_href_not_contains?: Maybe<String>;
  card_href_starts_with?: Maybe<String>;
  card_href_not_starts_with?: Maybe<String>;
  card_href_ends_with?: Maybe<String>;
  card_href_not_ends_with?: Maybe<String>;
  menu?: Maybe<MenuWhereInput>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
  OR?: Maybe<CardWhereInput[] | CardWhereInput>;
  NOT?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export interface MenuUpsertWithoutCardInput {
  update: MenuUpdateWithoutCardDataInput;
  create: MenuCreateWithoutCardInput;
}

export interface MenuUpdateManyMutationInput {
  menu_icon?: Maybe<String>;
  menu_name?: Maybe<String>;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  OR?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  NOT?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface CardUpsertWithWhereUniqueWithoutMenuInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutMenuDataInput;
  create: CardCreateWithoutMenuInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MenuConnection {
  pageInfo: PageInfo;
  edges: MenuEdge[];
}

export interface MenuConnectionPromise
  extends Promise<MenuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuEdge>>() => T;
  aggregate: <T = AggregateMenuPromise>() => T;
}

export interface MenuConnectionSubscription
  extends Promise<AsyncIterator<MenuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuSubscription>() => T;
}

export interface MenuSubscriptionPayload {
  mutation: MutationType;
  node: Menu;
  updatedFields: String[];
  previousValues: MenuPreviousValues;
}

export interface MenuSubscriptionPayloadPromise
  extends Promise<MenuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuPreviousValuesPromise>() => T;
}

export interface MenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuPreviousValuesSubscription>() => T;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface Menu {
  id: ID_Output;
  menu_icon: String;
  menu_name: String;
}

export interface MenuPromise extends Promise<Menu>, Fragmentable {
  id: () => Promise<ID_Output>;
  menu_icon: () => Promise<String>;
  menu_name: () => Promise<String>;
  card: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuSubscription
  extends Promise<AsyncIterator<Menu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  menu_icon: () => Promise<AsyncIterator<String>>;
  menu_name: () => Promise<AsyncIterator<String>>;
  card: <T = Promise<AsyncIterator<CardSubscription>>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuNullablePromise
  extends Promise<Menu | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  menu_icon: () => Promise<String>;
  menu_name: () => Promise<String>;
  card: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface MenuPreviousValues {
  id: ID_Output;
  menu_icon: String;
  menu_name: String;
}

export interface MenuPreviousValuesPromise
  extends Promise<MenuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  menu_icon: () => Promise<String>;
  menu_name: () => Promise<String>;
}

export interface MenuPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  menu_icon: () => Promise<AsyncIterator<String>>;
  menu_name: () => Promise<AsyncIterator<String>>;
}

export interface CardPreviousValues {
  id: ID_Output;
  card_icon: String;
  card_title: String;
  card_description: String;
  card_href: String;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  card_icon: () => Promise<String>;
  card_title: () => Promise<String>;
  card_description: () => Promise<String>;
  card_href: () => Promise<String>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  card_icon: () => Promise<AsyncIterator<String>>;
  card_title: () => Promise<AsyncIterator<String>>;
  card_description: () => Promise<AsyncIterator<String>>;
  card_href: () => Promise<AsyncIterator<String>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface Card {
  id: ID_Output;
  card_icon: String;
  card_title: String;
  card_description: String;
  card_href: String;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  card_icon: () => Promise<String>;
  card_title: () => Promise<String>;
  card_description: () => Promise<String>;
  card_href: () => Promise<String>;
  menu: <T = MenuPromise>() => T;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  card_icon: () => Promise<AsyncIterator<String>>;
  card_title: () => Promise<AsyncIterator<String>>;
  card_description: () => Promise<AsyncIterator<String>>;
  card_href: () => Promise<AsyncIterator<String>>;
  menu: <T = MenuSubscription>() => T;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  card_icon: () => Promise<String>;
  card_title: () => Promise<String>;
  card_description: () => Promise<String>;
  card_href: () => Promise<String>;
  menu: <T = MenuPromise>() => T;
}

export interface AggregateMenu {
  count: Int;
}

export interface AggregateMenuPromise
  extends Promise<AggregateMenu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuSubscription
  extends Promise<AsyncIterator<AggregateMenu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface MenuEdge {
  node: Menu;
  cursor: String;
}

export interface MenuEdgePromise extends Promise<MenuEdge>, Fragmentable {
  node: <T = MenuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuEdgeSubscription
  extends Promise<AsyncIterator<MenuEdge>>,
    Fragmentable {
  node: <T = MenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Menu",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
